#import "../thesis-base.typ": *

#structural-element("Заключение")

В ходе Работы был разработан прототип DSL для расширения базы знаний taint-анализатора PT JSA. Для него подробно описан синтаксис и семантика. Предоставлены механизмы переиспользования кода и создания пакетов библиотек. Для разработанного языка реализован транслятор, переводящий его в низкоуровневый код на C\# Script, который уже поддерживается анализатором. Таким образом обеспечивается не только совместимость с PT JSA, но и возможность реализации части кода расширения с использованием полного набора API анализатора. 

Полученное решение было апробировано на нескольких проектах, за основу которых взяты подходы, используемые в современной корпоративной разработке web-приложений. Для демонстрации возможностей DSL и его транслятора, были реализованы расширения базы знаний JSA для нескольких библиотек, использующих разные подходы и применяемые с разными целями: базы данных, HTTP-сервера, отправка и получение сетевых запросов. Также демонстрируется возможность разработки описаний для компонентов, которые были реализованы пользователем или автоматически им сгенерированы. Это особенно важно, так как, в отличие от популярных библиотек и фреймворков, они не могут быть поддержаны в базе знаний анализатора его производителем. По результатам апробации можно сделать вывод, что разработанные технологии пригодны к использованию.

В ходе апробации прототипов были выявлены некоторые недостатки. Одним из них является отсутствие функциональных значений и типов, что делает затруднительным, к примеру, поддержку мета-программирования с помощью декораторов в языке Python. Также, это не позволяет описывать функции обратного вызова (_callbacks_). В качестве преодоления этого ограничения, предлагается реализовывать необходимую часть расширения на языке C\# Script, что даст доступ к низкоуровневому API анализатора. 

Другим недостатком является отсутствие алгебраических типов данных, таких как типы пересечения и типы объединения. Они могли бы помочь точнее типизировать возвращаемые значения функций. Так как в Python типизация не является сильной, авторы некоторых библиотек пользуются этим и возвращают значения, тип которых продиктован внутренним состоянием объекта или значениями аргумента функции.

Два недостатка, приведённых выше, должны быть исправлены в будущем. Также, необходимо увеличить число семантических проверок. Для реализации конечного продукта по этому прототипу, необходимо включить поддержку всех других языков, поддерживаемых PT JSA: Ruby, C\#, Go, Java и других. Также, необходимо разработать инструменты программиста, такие как отладчик, LSP сервер, расширения для IDE. Одним из направлений развития могут стать инструменты для автоматической или автоматизированной генерации кода расширений PT JSA. К примеру, их можно получать на основании контрактов protobuf или openAPI.

