#import "../thesis-base.typ": itmo-bachelor-thesis, structural-element, chapter, term

#structural-element("Введение")

Программная инженерия на протяжении всего своего существования стремилась автоматизировать каждый из аспектов разработки и сопровождения программного обеспечения. Так появились компиляторы, IDE, анализаторы кода, ассистенты для его написания и многие другие классы инструментов. Многие из них значительно улучшают качество жизни программистов, а значит, делают их продуктивнее.

Одним из ключевых классов инструментов являются анализаторы кода. Они разделяются на статические, которые производят анализ без фактического запуска программы, а также динамические, которые анализируют запущенную программу. Каждый из этих подходов, как и гибридные, нашли своё применение. К примеру, статический анализ кода применяется в компиляторах, а одной из сфер применения динамического анализа является поиск ошибок в ПО.

Анализаторы кода позволяют определять некоторые свойства программ. К ним относятся: оценка качества кода и проверка соблюдения стиля, обнаружение дефектов и неиспользуемого кода, анализ производительности и энергоэффективности. Для каждого из типов анализа применяются различные подходы. Некоторые из них работают с кодом как с обычным текстом, другим же требуется специальное представление программы для большей эффективности. 

Одним из подходов, применяемых в статическом анализе, является анализ потоков данных (_Data Flow Analysis_) @khedker2017data. Он позволяет собирать информацию о возможных значениях и путях передачи данных в программе. Как и у многих других автоматических методов анализа кода, у него есть множество технических проблем. Одной из них является проблема взрыва количества путей @path_explotion. Современные программы имеют большие размеры. В большинстве из них представлено большое количество ветвлений, циклов и рекурсий. Так как каждая из этих операций потенциально приводит к увеличению числа состояний в два раза, их общее число растёт экспоненциально. Эту проблему называют проблемой взрыва количества путей. 

Существует большое количество подходов для частичного решения проблемы взрыва количества путей. К ним относятся использование суммаризаций, объединяющих несколько состояний в одно, применение эффективных алгоритмов для хранения и операций с состояниями, а также аппроксимацией свойств известного анализируемого кода. К такому коду может относиться код стандартной библиотеки анализируемого языка, код наиболее популярных библиотек и фреймворков. Информация, которую инструмент анализа кода имеет о таких компонентах, называют базой знаний. 

Одной из областей применения анализа потока данных является поиск уязвимостей в исходном коде программ (_static automatic security testing_, _SAST_). Для этого анализаторы отслеживают потоки данных от источников (_sources_) до стоков (_sinks_). Источниками обычно считают обработчики HTTP-запросов, входные аргументы консольных приложений. Стоками называют базы данных, ответ пользователю, операции с диском. Существуют также фильтрующие функции, которые проводят валидацию данных из точек входа, предотвращая попадания загрязнённых (_tainted_) данных в стоки. Примером такой валидации могут служить функции, экранирующие HTML-теги, проверяющие пользовательские данные при помощи регулярных выражений и другие преобразования. 

Одним из ведущих SAST анализаторов, использующих анализ потоков данных, является коммерческий анализатор JSA компании Positive Technologies. Для увеличения точности, в нём применяется символьное исполнение, с помощью которого анализатор отсеивает большое количество ложно-положительных срабатываний. Он поддерживает анализ таких языков как C\#, Java, JavaScript, TypeScript, Python, PHP и Go. Для каждого из поддерживаемых языков реализован отдельный модуль, называемый языковым провайдером. Языковые провайдеры анализируют исходный код приложений, строят символьное представление, по которому происходит анализ потоков данных между источниками и стоками. 

PT JSA использует базы знаний об аппроксимациях библиотек и фреймворков на языке сценариев C\# Script — расширении языка C\#. Такие сценарии имеют доступ ко внутренней инфраструктуре анализатора JSA, что даёт неограниченные возможности, однако, требует высоких навыков разработки у программистов. Применение более простого подхода к расширению базы знаний анализатора кода JSA позволило бы упростить этот процесс, что повлекло бы к улучшению таких важных характеристик, как скорость анализа и его точность, у пользователей.


В первой главе приведён обзор существующих подходов к расширению функциональности анализаторов кода. Во втором разделе производится постановка задачи и анализ путей её решения. В третьем разделе описаны синтаксис и семантика прототипа DSL и его транслятора в язык C\# Script. В четвёртом разделе происходит апробация полученного языка и его транслятора, а также приводятся примеры описаний библиотек на нём. В заключении полученные результаты анализируются, на основании чего приводятся идеи для дальнейшего развития проекта. 