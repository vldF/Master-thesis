#import "../thesis-base.typ": itmo-bachelor-thesis, structural-element, chapter, term

#chapter(1, "Обзор существующих подходов")

Данная глава содержит критерии сравнения существующих подходов к решению проблемы расширения набора правил для статических анализаторов кода. Затем, рассматриваются наиболее актуальные существующие подходы.

== Критерии сравнения подходов

Существует большое число подходов, призванных решить задачу расширения базы знаний SAST анализатора кода. В рамках данной работы, их можно классифицировать по следующим признакам:

  - Возможность интеграции в JSA компании Positive Technologies
  - Тип описываемых правил
    - Правила, моделирующие поведение внешних зависимостей кода
    - Правила, моделирующие потоки данных
  - Способ описания правил
    - Кодом на анализируемом языке
    - Кодом на специальном языке
    - Кодом на другом языке общего назначения
    - Другой структурированный текстовый формат
  - Абстракция анализа
    - Потоки данных
    - Исходный код программы
    - Специальное представление
  - Способ определения сущностей в коде
    - На базе регулярных выражений
    - На основе семантического анализа
  - Поддержка мета-программирования (декораторы, аннотации, определение семантики на основе соглашений об именовании)

== Оценка существующих подходов

Данный раздел содержит оценку подходов, реализованных в существующих продуктах или представленных в академических работах. Каждый из подходов оценивается с помощью критериев, приведённых в Разделе 1.1. 

=== CodeQL

CodeQL @CodeQL_docs — одноимённые язык и инструмент для статического анализа кода. Процесс анализа состоит из трёх этапов: построение базы данных, соответствующей анализируемому коду, запуск запросов к ней и отображение результатов в пользовательском интерфейсе. В основе инструмента находится подход, который рассматривает анализ кода как запрос к БД. Таким образом, инструмент позволяет обнаруживать дефекты ПО, такие как уязвимости и ошибки. 

CodeQL поддерживает различные языки программирования, такие как C/C++, C\#, Go, Java, Kotlin, Python. Для каждого из языков строится AST, которое затем преобразуется в специальное реляционное представление. В него уже входят правила для базовых ошибок и уязвимсотей. Имеется возможность для создания как запросов, так и моделей, описывающих потоки данных в библиотеках и фреймворках. Для этого используется язык yaml. Модели позволяют указать анализатору на поведение потоков данных в библиотеке. К примеру, можно указать, что заражённые данные распространяются от аргументов к возвращаемому значению метода, порождаются им или поглощаются им. Таким образом, можно указывать источники, стоки и фильтрующие функции в домене потоков данных. В языке запросов CodeQL также есть поддержка аннотаций и декораторов, что позволяет создавать запросы с учётом этих языковых конструкций.

Несмотря на то что эта технология обладает расширением для редактора кода VS Code, код правил, описанный на языке YAML, сложно читать и поддерживать. Также, модели позволяют описывать только потоки данных, но не имеют возможности для описания семантики библиотеки. У языка CodeQL отсутствует возможность быть интегрированным в другой анализатор.

=== Semgrep

@Semgrep_docs реализует легковесный семантический сбор информации о коде. Описание запросов для получения информации происходит на специальном предметно-определяемом языке. Он поддерживает описание синтаксических конструкций целевого языка на уровне AST с использованием оператора _..._, обозначающего произвольное поддерево, а также мета-переменные, позволяющие давать имена таким поддеревьям. Поддержаны также примитивные литералы (строки, числа, булевы значения), идентификаторы, операторы и все основные синтаксические конструкции. Инструмент поддерживает большое число языков программирования, такие как Java, Kotlin, C\#, Python. Используется внутреннее представление, в которое переводится код на каждом из анализируемых языков. 

Одной из ключевых особенностей инструмента является скорость его работы. Для этого анализ осуществляется с использованием простых подходов: сопоставления с шаблоном, получения информации о типах на основе синтаксиса и примитивного анализа потоков данных. На основе последнего построен taint-анализ, для которого можно описать источники, стоки и фильтрующие функции в виде правил на языке YAML. 

Этот инструмент позволяет описывать большое количество простых ошибок и уязвимостей, таких как использование вывода в консоль в качестве логирования, отключение проверки сертификатов или простые SQL инъекции. Расширение возможностей анализатора предполагает написание правил для пользовательского кода, а не для описания моделей его зависимостей, что, вкупе с неточными методами анализа, приводит к или к низкой полноте анализа, или к высокому количеству ложно-положительных срабатываний. У языка правил semgrep отсутствует возможность интеграции в другие анализаторы. Стоит отметить, что так как правила анализа представляют мета-информацию и код, напоминающий анализируемый, то их удобно читать и поддерживать.

=== SonarQube

@SonarQube_docs предоставляет различные техники анализа для поиска ошибок и уязвимостей в коде приложений. Поддерживается большой список языков программирования, в частности, Java, C\#, Kotlin, Python. 

Система предоставляет четыре способа расширения функциональных возможностей: с помощью создания расширения сервера, с помощью правил XPath, с помощью определения дополнительных точек входа, стоков и фильтрующих функций, а также с помощью внешних утилит, результаты анализа которых можно импортировать @SonarQube_docs_coding_rules. Правила XPath поддерживаются  только для Flex, PL/SQL, PL/I и XML. Расширения правил для taint-анализа происходит путём описания сигнатур соответствующих функций с помощью кода на JSON. Для некоторых языков поддержано определение важных для taint-анализа сигнатур функций, однако, этот механизм нельзя расширить пользовательскими правилами. 

Недостатками данного инструмента можно считать низкую гибкость расширений taint-анализа. Несмотря на то что он предоставляет большое количество типов метода с точки зрения анализа (источник данных, фильтрующая функция, функция проверки, функция передачи без изменений и сток), они не позволяют учитывать многие важные особенности кода библиотек и фреймворков. К примеру, нет возможности описать преобразования значений, что приводит к понижению точности анализа. Также стоит отметить отсутствие возможности задания своих типов уязвимостей. Интеграция языка SonarQube в анализатор кода PT JSA также невозможна ввиду принципиальных различий в используемых подходов.

=== LibSL

@libsl позволяет описывать поведение внешних библиотек с использованием расширенных конечных автоматов. Язык предоставляет большой набор инструментов для расширения, включая типовые и семантические аннотации, семантические действия, библиотеки спецификаций. 

В @spider было показано, как этот язык может быть применён для интеграции со статическим анализатором кода KEX @kex с целью поиска интеграционных ошибок при использовании библиотек. Предлагается аппроксимировать поведение описываемых методов с помощью арифметических операций и операций с состоянием автоматов. В @libsl_modeling авторы предлагают использование LibSL для аппроксимации поведения библиотек в различных задачах анализа программ, в том числе, в задачах taint-анализа.

Несмотря на то что данный подход качественно показал себя в задаче поиска ошибок интеграции, этот инструмент предоставляет качественно другой уровень детализации поведения компонентов ПО. Его необходимо было бы расширить специальными операциями для информирования анализатора об операциях с потоками данных и задания источников, стоков и фильтрующих функций. Также, существенная часть языковых возможностей, таких как конечные автоматы и описание переходов между их состояниями являлась бы излишней для задачи расширения возможностей анализатора кода PT JSA. Таким образом, интеграция LibSL в анализатор кода PT JSA является возможной, но повлечёт серьёзные изменения в язык.

=== FlowDroid

@flowdroid — инструмент для анализа безопасности приложений для ОС Android. Он реализует подход taint-анализа, для чего в этом инструменте есть механизм для описания источников, стоков и фильтрующих функций на языке XML. 

Подходы, применяемые в FlowDroid для описания библиотечного кода, имеют типичные для такой разметки недостатки: их сложно читать и поддерживать, а любое нетривиальное описание метода на этом языке получается очень объёмным. По этим причинам, реализовывать такой подход, как и интегрировать уже существующие правила, в PT JSA не имеет смысла. 

== Резюме

Данная глава обозревает существующие подходы к решению проблемы расширения возможностей SAST-анализаторов кода. Они имеют множество недостатков, основными из которых являются:

- Невыразительный или сложный язык для написания расширений базы знаний;
- Отсутствует возможность для описания потоков данных с источниками, стоками и фильтрующими функциями;
- Расширения, если и позволяют описывать потоки данных, то не описывают их преобразования;
- Отсутствует возможность интеграции в анализатор кода JSA компании Positive Technologies.

Для исправления этих недостатков было принято разработать новый инструмент.
